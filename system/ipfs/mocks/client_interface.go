// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IPFS is an autogenerated mock type for the IPFS type
type IPFS struct {
	mock.Mock
}

// CreateDocument provides a mock function with given fields: data, saveDocument
func (_m *IPFS) CreateDocument(data []byte, saveDocument bool) (string, error) {
	ret := _m.Called(data, saveDocument)

	var r0 string
	if rf, ok := ret.Get(0).(func([]byte, bool) string); ok {
		r0 = rf(data, saveDocument)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, bool) error); ok {
		r1 = rf(data, saveDocument)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDocument provides a mock function with given fields: cid
func (_m *IPFS) GetDocument(cid string) ([]byte, error) {
	ret := _m.Called(cid)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(cid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIPFS interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPFS creates a new instance of IPFS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPFS(t mockConstructorTestingTNewIPFS) *IPFS {
	mock := &IPFS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
